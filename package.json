{
  "name": "chatgpt",
  "displayName": "ChatGPT: write and improve code using AI",
  "description": "Use ChatGPT right inside the IDE to enhance and automate your coding with AI-powered assistance (unofficial)",
  "version": "0.6.3",
  "publisher": "timkmecl",
  "icon": "resources/extensionIcon.png",
  "license": "MIT",
  "repository": {
    "url": "https://github.com/timkmecl/chatgpt-vscode"
  },
  "engines": {
    "vscode": "^1.73.0"
  },
  "categories": [
    "Other"
  ],
  "keywords": [
    "chatgpt",
    "openai",
    "gpt3",
    "copilot",
    "ai",
    "explain",
    "find bugs",
    "explain ",
    "refactor"
  ],
  "activationEvents": [
    "onView:chatgpt.chatView",
    "onCommand:chatgpt.ask",
    "onCommand:chatgpt.explain",
    "onCommand:chatgpt.refactor",
    "onCommand:chatgpt.optimize",
    "onCommand:chatgpt.findProblems",
    "onCommand:chatgpt.documentation",
    "onCommand:chatgpt.complete"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "chatgpt.ask",
        "title": "Ask ChatGPT"
      },
      {
        "command": "chatgpt.explain",
        "title": "ChatGPT: Explain selection"
      },
      {
        "command": "chatgpt.refactor",
        "title": "ChatGPT: Refactor selection"
      },
      {
        "command": "chatgpt.findProblems",
        "title": "ChatGPT: Find problems"
      },
      {
        "command": "chatgpt.optimize",
        "title": "ChatGPT: Optimize selection"
      },
      {
        "command": "chatgpt.documentation",
        "title": "ChatGPT: Write documentation"
      },
      {
        "command": "chatgpt.complete",
        "title": "ChatGPT: Complete code"
      },
      {
        "command": "chatgpt.resetConversation",
        "title": "Reset ChatGPT conversation"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "command": "chatgpt.ask",
          "when": "editorTextFocus",
          "group": "chatgpt-menu-group@1"
        },
        {
          "command": "chatgpt.explain",
          "when": "editorHasSelection",
          "group": "chatgpt-menu-group@2"
        },
        {
          "command": "chatgpt.refactor",
          "when": "editorHasSelection",
          "group": "chatgpt-menu-group@3"
        },
        {
          "command": "chatgpt.findProblems",
          "when": "editorHasSelection",
          "group": "chatgpt-menu-group@4"
        },
        {
          "command": "chatgpt.optimize",
          "when": "editorHasSelection",
          "group": "chatgpt-menu-group@5"
        },
        {
          "command": "chatgpt.documentation",
          "when": "editorHasSelection",
          "group": "chatgpt-menu-group@6"
        },
        {
          "command": "chatgpt.complete",
          "when": "editorHasSelection",
          "group": "chatgpt-menu-group@7"
        }
      ],
      "commandPalette": [
        {
          "command": "chatgpt.ask"
        },
        {
          "command": "chatgpt.explain",
          "when": "editorHasSelection"
        },
        {
          "command": "chatgpt.refactor",
          "when": "editorHasSelection"
        },
        {
          "command": "chatgpt.findProblems",
          "when": "editorHasSelection"
        },
        {
          "command": "chatgpt.optimize",
          "when": "editorHasSelection"
        },
        {
          "command": "chatgpt.documentation",
          "when": "editorHasSelection"
        },
        {
          "command": "chatgpt.complete",
          "when": "editorHasSelection"
        },
        {
          "command": "chatgpt.resetConversation"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "chatgpt",
          "title": "ChatGPT",
          "icon": "resources/icon.png"
        }
      ]
    },
    "views": {
      "chatgpt": [
        {
          "type": "webview",
          "id": "chatgpt.chatView",
          "name": "ChatGPT"
        }
      ]
    },
    "configuration": {
      "title": "chatGPT",
      "type": "object",
      "properties": {
        "chatgpt.mode": {
          "type": "string",
          "order": 0,
          "markdownDescription": "API mode",
          "default": "ChatGPTAPI",
          "enum": [
            "ChatGPTAPI",
            "ChatGPTUnofficialProxyAPI"
          ],
          "enumDescriptions": [
            "Official OpenAI API.",
            "Unofficial ChatGPT proxy hosted by 3rd parties."
          ]
        },
        "chatgpt.apiKey": {
          "markdownDescription": "OpenAI API key from [https://platform.openai.com/account/api-keys](https://platform.openai.com/account/api-keys)",
          "type": "string",
          "order": 10
        },
        "chatgpt.accessToken": {
          "markdownDescription": "ChatGPT access token from [https://chat.openai.com/api/auth/session](https://chat.openai.com/api/auth/session), lasts for ~8 hours",
          "type": "string",
          "order": 15
        },
        "chatgpt.pasteOnClick": {
          "type": "boolean",
          "default": true,
          "description": "Paste the code from a codeblock inside the response into the editor when you click on it",
          "order": 20
        },
        "chatgpt.promptPrefix.explain": {
          "type": "string",
          "default": "Explain what this code does: ",
          "description": "The prompt prefix used for explaining the selected code",
          "order": 30
        },
        "chatgpt.promptPrefix.refactor": {
          "type": "string",
          "default": "Refactor this code and explain what's changed: ",
          "description": "The prompt prefix used for refactoring the selected code",
          "order": 40
        },
        "chatgpt.promptPrefix.findProblems": {
          "type": "string",
          "default": "Find problems with the following code, fix them and explain what was wrong (Do not change anything else, if there are no problems say so): ",
          "description": "The prompt prefix used for finding problems in the selected code",
          "order": 50
        },
        "chatgpt.promptPrefix.documentation": {
          "type": "string",
          "default": "Write documentation for the following code: ",
          "description": "The prompt prefix used for writing documentation for the selected code",
          "order": 70
        },
        "chatgpt.promptPrefix.complete": {
          "type": "string",
          "default": "Don't explain the following code.\n\nDon't explain the generated code.\n\nShow the updated code only, no description.\n\nGenerate code according to the last comment:\n\n* Append the code after the comment\n* Keep the comment text",
          "description": "Complete the code according to the last comment.",
          "order": 71
        },
        "chatgpt.promptPrefix.optimize": {
          "type": "string",
          "default": "Optimize the following code if there is anything to improve, if not say so: ",
          "description": "The prompt prefix used for optimizing the selected code",
          "order": 60
        },
        "chatgpt.keepConversation": {
          "type": "boolean",
          "default": true,
          "description": "Keep the conversation going by using the same conversation ID for all requests (allows follow-up questions)",
          "order": 80
        },
        "chatgpt.timeoutLength": {
          "type": "number",
          "default": "120",
          "description": "How long should the request wait for a response before timing out (in seconds)",
          "order": 90
        },
        "chatgpt.selectedInsideCodeblock": {
          "type": "boolean",
          "default": true,
          "description": "Append selected code as a codeblock (```...code...```) instead of plain text",
          "order": 100
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "yarn run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "yarn run compile-tests && yarn run compile && yarn run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js",
    "update-package-lock": "npm install --package-lock-only"
  },
  "devDependencies": {
    "@types/glob": "^8.0.0",
    "@types/mocha": "^10.0.1",
    "@types/node": "16.x",
    "@types/vscode": "^1.73.0",
    "@typescript-eslint/eslint-plugin": "^5.45.0",
    "@typescript-eslint/parser": "^5.45.0",
    "@vscode/test-electron": "^2.2.0",
    "eslint": "^8.28.0",
    "glob": "^8.0.3",
    "mocha": "^10.1.0",
    "ts-loader": "^9.4.1",
    "typescript": "^4.9.3",
    "vscode": "^1.1.37",
    "webpack": "^5.75.0",
    "webpack-cli": "^5.0.0"
  },
  "dependencies": {
    "chatgpt": "^4.7.2",
    "cheerio": "^1.0.0-rc.12",
    "fetch": "^1.1.0",
    "node-fetch": "^3.3.0"
  }
}
